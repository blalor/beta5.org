# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
## https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions
---
name: Deploy Everything
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
    - push

permissions:
    contents: read

jobs:
    build-site:
        timeout-minutes: 10
        runs-on: ubuntu-22.04

        env:
            BUNDLE_FROZEN: "true"

        steps:
            -   name: checkout
                uses: actions/checkout@4.2.2

            -   name: set up Ruby
                uses: ruby/setup-ruby@v1.227.0
                with:
                    working-directory: jekyll

                    ruby-version: 3.0
                    bundler-cache: true # runs 'bundle install' and caches installed gems automatically

            -   name: jekyll build
                working-directory: jekyll
                env:
                    JEKYLL_ENV: production
                run: bundle exec jekyll build

            -   name: archive site
                working-directory: jekyll
                run: tar -czf _site.tgz _site

            -   name: upload site artifact
                id: upload-site-artifact
                uses: actions/upload-artifact@v4.6.2
                with:
                    name: site
                    path: jekyll/_site.tgz
                    if-no-files-found: error
                    compression-level: 0

    # package-thumbor:
    #     timeout-minutes: 10
    #     runs-on: ubuntu-22.04

    #     steps:
    #         -   name: Configure AWS credentials
    #             uses: aws-actions/configure-aws-credentials@v4.1.0
    #             with:
    #                 aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
    #                 aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
    #                 aws-region: "${{ env.AWS_REGION }}"

    #         -   name: Login to Amazon ECR
    #             id: login-ecr
    #             uses: aws-actions/amazon-ecr-login@v2.0.1

    #         -   name: checkout
    #             uses: actions/checkout@4.2.2

    #         -   name: build image
    #             id: build-image
    #             working-directory: thumbor
    #             env:
    #                 REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
    #                 REPOSITORY: "beta5.org/thumbor"
    #                 IMAGE_TAG: "${{ github.sha }}"
    #             run: |-
    #                 docker build -t ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} .
    #                 echo docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}

    # package-post-by-email:
    #     timeout-minutes: 10
    #     runs-on: ubuntu-22.04

    #     steps: @todo

    terraform:
        # needs:
        #     - package-thumbor
        #     - package-post-by-email

        timeout-minutes: 10
        runs-on: ubuntu-22.04

        steps:
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v4.1.0
                with:
                    aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
                    aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                    aws-region: "${{ env.AWS_REGION }}"

            -   name: setup terraform
                uses: hashicorp/setup-terraform@v3.1.2
                with:
                    terraform_version: 1.11.2

            -   name: Configure Terraform plugin cache
                run: |-
                    echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "${GITHUB_ENV}"
                    mkdir --parents "$HOME/.terraform.d/plugin-cache"

            -   name: Cache Terraform
                uses: actions/cache@v4.2.3
                with:
                    path: |
                        ~/.terraform.d/plugin-cache
                    key: terraform-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/.terraform.lock.hcl') }}

            -   name: checkout
                uses: actions/checkout@4.2.2

            -   name: tf init
                working-directory: terraform
                run: >-
                    terraform init
                    -input=false
                    -backend-config=bucket=${{ secrets.STATE_BUCKET }}
                    -backend-config=region=${{ env.STATE_BUCKET_REGION }}

            -   name: capture tf outputs
                working-directory: terraform
                run: terraform output -json > terraform.json

            -   name: upload site artifact
                id: upload-site-artifact
                uses: actions/upload-artifact@v4.6.2
                with:
                    name: tf_outputs
                    path: terraform/terraform.json
                    if-no-files-found: error

    deploy-site:
        needs:
            - build-site
            - terraform

        timeout-minutes: 10
        runs-on: ubuntu-22.04

        env:
            aws_cli_ver: 2.25.1
            AWS_PAGER: ""

        steps:
            # if we can't do this, no point in doing more
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v4.1.0
                with:
                    aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
                    aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                    aws-region: "${{ env.AWS_REGION }}"

            -   name: retrieve site artifact # from build-site job
                uses: actions/download-artifact@v4.2.1
                with:
                    name: site

            -   name: retrieve tf_outputs artifact # from terraform job
                uses: actions/download-artifact@v4.2.1
                with:
                    name: tf_outputs

            -   name: unarchive site
                run: tar -xzf _site.tgz

            -   name: cache awscli
                id: cache-awscli
                uses: actions/cache@v4.2.3
                with:
                    key: "${{ runner.os }}-${{ runner.arch }}-awscli-${{ env.aws_cli_ver }}"
                    path: |
                        /usr/local/aws-cli
                        /usr/local/bin/aws

            -   if: "${{ steps.cache-awscli.outputs.cache-hit != 'true' }}"
                name: install awscli
                uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1.0.7
                with:
                    version: "${{ env.aws_cli_ver }}"

            -   run: aws sts get-caller-identity

            -   name: sync site
                run: |-
                    target=$(
                        jq -r '
                            "s3://" + .bucket.value + "/" + .jekyll_site_prefix.value
                        ' terraform.json
                    )

                    aws s3 sync --delete _site/ "${target}"

            -   name: Failure Breakpoint
                if: failure()
                uses: namespacelabs/breakpoint-action@41904415b21af42923bf7274c0673b19bd4cc7ef # v0.0.12
                with:
                    duration: 30m
                    authorized-users: blalor
                    authorized_keys: >-
                        ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFicpOt+KWymf34XF2zwIfHPeI7wnYH3/gbXB021GlPV blalor@bravo5.org (Bobo)
